---
- name: "Set variable required_packages to true."
  ansible.builtin.set_fact:
    required_packages: false

- name: "Install python and pip on MacOS"
  block:
    
    - name: "Download Python package from python.org"
      ansible.builtin.get_url:
        url: "https://www.python.org/ftp/python/{{ python_version }}/python-{{ python_version }}-macos11.pkg"
        dest: "{{ ansible_facts['user_dir'] }}/python-{{ python_version }}-macos11.pkg"
        mode: "0o755"
        owner: "{{ ansible_facts['user_uid'] }}"
        group: "{{ ansible_facts['user_gid'] }}"
      register: python_pkg_downloaded

    - name: "Install Python {{ python_version }}"
      become: true
      ansible.builtin.shell:
        argv:
          - /usr/sbin/installer
          - -pkg "{{ ansible_facts['user_dir'] }}/python-{{ python_version }}-macos11.pkg"
          - -target /Applications
      when: python_pkg_downloaded is succeeded.

    - name: "Download pip script."
      ansible.builtin.get_url:
        url: "https://bootstrap.pypa.io/get-pip.py"
        dest: "{{ ansible_facts['user_dir'] }}/get-pip.py"
        mode: "0o700"
        owner: "{{ ansible_facts['user_uid'] }}"
        group: "{{ ansible_facts['user_gid'] }}"
      register: pip_script_downloaded

    - name: "Flush Handlers."
      ansible.builtin.meta: "flush_handlers"

    - name: Cleanup Installer and scripts.
      block:

        - name: Remove python-{{ python_version }}-macos11.pkg
          ansible.builtin.file:
            path: "{{ ansible_facts['user_dir']] }}/python-{{ python_version }}-macos11.pkg"
            state: "absent"
          when: "python_pkg_downloaded is succeeded"

        - name: "Remove pip script"
          ansible.builtin.file:
            path: "{{ ansible_facts['user_dir'] }}/get-pip.py"
            state: "absent"
          when: "pip_script_downloaded is succeeded"

- name: "Get get installation script."
  become: true
  ansible.builtin.get_url:
    url: "{{ script.url }}"
    dest: "{{ script.name }}"
    mode: "0o700"
    owner: "{{ ansible_facts['user_uid'] }}"
    group: "{{ ansible_facts['user_gid'] }}"
  loop:
    - { url: "https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh", name: "/tmp/homebrew.sh" }
  loop_control:
    loop_var: script
  register: download_homebrew
  notify: Install homebrew from script.

- name: "Flush Handlers"
  ansible.builtin.meta: flush_handlers
  when: download_homebrew is changed

- name: "Setup Casks for homebrew packages"
  community.general.homebrew_tap:
    name: "{{ tap.name }}"
    state: present
  loop:
    - { name: "hashicorp/tap" }
  loop_control:
    loop_var: tap

- name: "Install required packages via homebrew."
  community.general.homebrew:
    name: "{{ brew_package.name }}"
    state: latest
  loop:
    - { name: "vim" }
    - { name: "zsh" }
    - { name: "ruby" }
    - { name: "go" }
    - { name: "git" }
    - { name: "eza" }
    - { name: "cmake" }
    - { name: "gcc" }
    - { name: "node" }
    - { name: "gpg" }
    - { name: "openssh" }
    - { name: "ansible" }
    - { name: "awscli" }
    - { name: "azure-cli" }
    - { name: "xclip" }
    - { name: "tofu" }
    - { name: "hashicorp/tap/packer" }
    - { name: "hashicorp/tap/vlt" }
  loop_control:
    loop_var: brew_package


- name: "Install required packages via homebrew cask."
  community.general.homebrew_cask:
    name: "{{ cask.name }}"
    state: latest
  loop:
    - { name: "hyper" }
    - { name: "vscodium" }
    - { name: "google-cloud-sdk" }
  loop_control:
    loop_var: cask

- name: "Set variable required_packages to true."
  ansible.builtin.set_fact:
    required_packages: true
